{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post'; // state 생성 : 1) state를 바꾸고 싶을 때\n\nconst initialState = {\n  user: {},\n  post: {}\n}; // action : 2) 액션을 하나 만들어서 store에 store.dispatch\n// reducer : 3) 이전상태와 액션을 통해서 다음 상태를 만들어내는 함수 / (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","initialState","rootReducer","state","action","type","console","log","payload"],"sources":["/Users/gimjimin/Desktop/github/twiffer/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\nimport user from './user';\nimport post from './post';\n\n// state 생성 : 1) state를 바꾸고 싶을 때\nconst initialState = {\n  user: {\n\n  },\n  post: {\n\n  }\n};\n\n\n// action : 2) 액션을 하나 만들어서 store에 store.dispatch\n\n\n\n// reducer : 3) 이전상태와 액션을 통해서 다음 상태를 만들어내는 함수 / (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE :\n      console.log('HYDRATE', action);\n      return { ...state, ...action.payload };\n    \n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;EACnBF,IAAI,EAAE,EADa;EAInBC,IAAI,EAAE;AAJa,CAArB,C,CAUA;AAIA;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;EACpD,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKP,OAAL;MACEQ,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;MACA,uCAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;IAEF;MACE,OAAOL,KAAP;EANJ;AAQD,CATD;;AAWA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}