{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// state 생성 : 1) state를 바꾸고 싶을 때\nconst initialState = {\n  name: 'nasby',\n  age: 11,\n  password: 'babo'\n}; // action : 2) 액션을 하나 만들어서 store에 store.dispatch\n\nconst changeNickname = {\n  type: 'CHANGE_NICKNAME',\n  data: 'sangari'\n}; // reducer : 3) 리듀서를 생성하고 타입\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CHANGE_NICKNAME':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // state의 다른 내용은 그대로 두되\n        name: action.data // name만 action.data로 바꾸겠다\n\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["initialState","name","age","password","changeNickname","type","data","rootReducer","state","action"],"sources":["/Users/gimjimin/Desktop/github/twiffer/front/reducers/index.js"],"sourcesContent":["// state 생성 : 1) state를 바꾸고 싶을 때\nconst initialState = {\n  name: 'nasby',\n  age: 11,\n  password: 'babo',\n};\n\n// action : 2) 액션을 하나 만들어서 store에 store.dispatch\nconst changeNickname = {\n  type: 'CHANGE_NICKNAME',\n  data: 'sangari',\n}\n\n// reducer : 3) 리듀서를 생성하고 타입\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CHANGE_NICKNAME':\n      return {\n        ...state, // state의 다른 내용은 그대로 두되\n        name: action.data, // name만 action.data로 바꾸겠다\n      }\n  }\n};\n\nexport default rootReducer;"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE,OADa;EAEnBC,GAAG,EAAE,EAFc;EAGnBC,QAAQ,EAAE;AAHS,CAArB,C,CAMA;;AACA,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,iBADe;EAErBC,IAAI,EAAE;AAFe,CAAvB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;EACpD,QAAQA,MAAM,CAACJ,IAAf;IACE,KAAK,iBAAL;MACE,uCACKG,KADL;QACY;QACVP,IAAI,EAAEQ,MAAM,CAACH,IAFf,CAEqB;;MAFrB;EAFJ;AAOD,CARD;;AAUA,eAAeC,WAAf"},"metadata":{},"sourceType":"module"}