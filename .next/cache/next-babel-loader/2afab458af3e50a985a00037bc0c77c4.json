{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n// state 생성 : 1) state를 바꾸고 싶을 때\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n\nvar login = function login(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n}; // action : 2) 액션을 하나 만들어서 store에 store.dispatch\n\n\nvar changeNickname = function changeNickname(data) {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data: data\n  };\n};\n\nchangeNickname('sangari');\nstore.dispatch(changeNickname('jm')); // reducer : 3) 이전상태와 액션을 통해서 다음 상태를 만들어내는 함수 / (이전상태, 액션) => 다음상태\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","login","data","type","changeNickname","store","dispatch","rootReducer","state","action"],"sources":["/Users/gimjimin/Desktop/github/twiffer/front/reducers/index.js"],"sourcesContent":["// state 생성 : 1) state를 바꾸고 싶을 때\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {},\n  },\n  post: {\n    mainPosts: [],\n  }\n};\n\nconst login = (data) => {\n  return {\n    type: 'LOG_IN',\n    data,\n  }\n}\n\n\n// action : 2) 액션을 하나 만들어서 store에 store.dispatch\nconst changeNickname = (data) => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data,\n  }\n};\n\nchangeNickname('sangari');\n\nstore.dispatch(changeNickname('jm'));\n\n\n\n// reducer : 3) 이전상태와 액션을 통해서 다음 상태를 만들어내는 함수 / (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true,\n        } \n        \n      }\n  }\n};\n\nexport default rootReducer;"],"mappings":";;;;;;AAAA;AACA,IAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,UAAU,EAAE,KADR;IAEJD,IAAI,EAAE,IAFF;IAGJE,UAAU,EAAE,EAHR;IAIJC,SAAS,EAAE;EAJP,CADa;EAOnBC,IAAI,EAAE;IACJC,SAAS,EAAE;EADP;AAPa,CAArB;;AAYA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAU;EACtB,OAAO;IACLC,IAAI,EAAE,QADD;IAELD,IAAI,EAAJA;EAFK,CAAP;AAID,CALD,C,CAQA;;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACF,IAAD,EAAU;EAC/B,OAAO;IACLC,IAAI,EAAE,iBADD;IAELD,IAAI,EAAJA;EAFK,CAAP;AAID,CALD;;AAOAE,cAAc,CAAC,SAAD,CAAd;AAEAC,KAAK,CAACC,QAAN,CAAeF,cAAc,CAAC,IAAD,CAA7B,E,CAIA;;AACA,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAkC;EAAA,IAAjCC,KAAiC,uEAAzBd,YAAyB;EAAA,IAAXe,MAAW;;EACpD,QAAQA,MAAM,CAACN,IAAf;IACE,KAAK,QAAL;MACE,uCACKK,KADL;QAEEb,IAAI,kCACCa,KAAK,CAACb,IADP;UAEFC,UAAU,EAAE;QAFV;MAFN;EAFJ;AAWD,CAZD;;AAcA,eAAeW,WAAf"},"metadata":{},"sourceType":"module"}